enclave {
	include "librats/api.h"
	include "librats/verifier.h"
	include "librats/attester.h"
	include "librats/err.h"
	include "sgx_report.h"
	include "sgx_quote_3.h"
	include "sgx_ql_quote.h"
	include "sgx_qve_header.h"
	include "time.h"

	untrusted {
		void rats_ocall_get_target_info([out] sgx_target_info_t *qe_target_info);

		rats_attester_err_t rats_ocall_qe_get_quote_size([out] uint32_t *quote_size);

		rats_attester_err_t rats_ocall_qe_get_quote([in]sgx_report_t *report, uint32_t quote_size,
                                                [out, size=quote_size] uint8_t *quote);

        rats_verifier_err_t rats_ocall_sgx_qv_get_quote_supplemental_data_size([out] uint32_t *p_data_size);

		rats_verifier_err_t rats_ocall_ecdsa_verify_evidence([in, size=quote_size] uint8_t *p_quote,
                                                uint32_t quote_size,
                                                uint32_t collateral_version,
                                                [in, size=collateral_pck_crl_issuer_chain_size] char * collateral_pck_crl_issuer_chain,
                                                uint32_t collateral_pck_crl_issuer_chain_size,
                                                [in, size=collateral_root_ca_crl_size] char * collateral_root_ca_crl,
                                                uint32_t collateral_root_ca_crl_size,
                                                [in, size=collateral_pck_crl_size] char * collateral_pck_crl,
                                                uint32_t collateral_pck_crl_size,
                                                [in, size=collateral_tcb_info_issuer_chain_size] char * collateral_tcb_info_issuer_chain,
                                                uint32_t collateral_tcb_info_issuer_chain_size,
                                                [in, size=collateral_tcb_info_size] char * collateral_tcb_info,
                                                uint32_t collateral_tcb_info_size,
                                                [in, size=collateral_qe_identity_issuer_chain_size] char * collateral_qe_identity_issuer_chain,
                                                uint32_t collateral_qe_identity_issuer_chain_size,
                                                [in, size=collateral_qe_identity_size] char * collateral_qe_identity,
                                                uint32_t collateral_qe_identity_size,
                                                time_t expiration_check_date,
                                                [out] uint32_t *p_collateral_expiration_status,
                                                [out] sgx_ql_qv_result_t *p_quote_verification_result,
                                                [in, out] sgx_ql_qe_report_info_t *p_qve_report_info,
                                                uint32_t supplemental_data_size,
                                                [out, size=supplemental_data_size] uint8_t *p_supplemental_data);

		rats_attester_err_t rats_ocall_tee_qv_get_collateral([in, size=quote_size] const uint8_t *pquote,
                                                uint32_t quote_size,
                                                [out] uint8_t **pp_quote_collateral_untrusted);

		rats_attester_err_t rats_ocall_tee_qv_free_collateral([user_check] uint8_t *p_quote_collateral_untrusted);
	};
};
